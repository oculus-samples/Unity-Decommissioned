%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Multiplayer
  m_EditorClassIdentifier: 
  m_displayName: Multiplayer
  m_hierarchyName: Multiplayer
  m_context: {fileID: 11400000, guid: ac4116a94c89e594695674aa38d3d7b1, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1006
  m_overrideMarkdownText: '# Multiplayer

    

    This showcase highlights how
    to quickly integrate key multiplayer features from the platform to build a project
    that facilitates easy interaction with others.

    

    ## Player to Lobby
    Options

    

    In *Decommissioned*, you can join or create a game in two
    ways: Quick Match and Private Match.

    

    <div><img src="./Media/MainMenuArcade.png"
    width="500"></div>

    

    ### Quick Match

    

    The Quick Match
    button initiates a process where the application tries to join a random room
    as a client using the Photon random room API. If no room is available, it creates
    a new room as a host.

    

    Anyone can join a public match before it starts
    if there is space. If all rooms are full, a new room is created for the player
    trying to join.

    

    ### Private Match

    

    This option creates
    a private room. Only users who receive invites through the Meta Platform can
    join.

    

    ## Navigation Flow

    

    The [MainMenu](../Assets/Decommissioned/Scripts/App/MainMenu.cs)
    script is central to navigation. It encapsulates the API for navigating the application,
    starting the connection flow through the [NetworkLayer](../Packages/com.meta.multiplayer.netcode-photon/Networking/NetworkLayer.cs)
    using [Application.Core](../Assets/Decommissioned/Scripts/App/Application.Core.cs)
    and [Application.Oculus](../Assets/Decommissioned/Scripts/App/Application.Oculus.cs).

    

    The
    Application.Core script manages network state changes. When a player connects
    or disconnects, the Application.Oculus script configures them into the appropriate
    room with the correct [GroupPresenceState](../Packages/com.meta.multiplayer.netcode-photon/Core/GroupPresenceState.cs).

    

    Upon
    connection, the application navigates to the [Lobby scene](../Assets/Decommissioned/Scenes/Lobby.unity)
    using the [SceneLoader](../Packages/com.meta.multiplayer.netcode-photon/Core/SceneLoader.cs).
    The scene loader manages scene states and navigation using Netcode. When connected
    through Netcode, the application uses Netcode''s [NetworkSceneManager](../Packages/com.unity.netcode.gameobjects/Runtime/SceneManagement/NetworkSceneManager.cs)
    to synchronize the current Unity scene among connected users.

    

    ##
    Invitations

    

    When a user receives an invitation, whether the game
    is launched or not, [Application.Oculus](../Assets/Decommissioned/Scripts/App/Application.Oculus.cs)
    handles the intent generated by this process.

    

    The application checks
    the intent information and triggers the appropriate navigation flow. The core
    information needed is the lobbySessionId, which names the room the user wants
    to join.

    

    ## VoIP

    

    [VoipController](../Packages/com.meta.multiplayer.netcode-photon/Core/VoipController.cs)
    sets up the VoIP speaker and recorder for players. The recorder captures the
    local player''s voice and sends it over the network, where a speaker on the other
    client plays the sound. It also checks for audio recording permissions from the
    platform.

    

    [VoipHandler](../Packages/com.meta.multiplayer.netcode-photon/Core/VoipHandler.cs)
    tracks the recorder or speaker of an entity, simplifying muting and unmuting
    or starting and stopping recording by referencing the recorder and speaker. This
    is used by the muting behavior detailed below.

    

    ### Muting

    

    As
    players move during a match, their voice chat state (muted/unmuted) may change
    based on nearby players. Various components access and change this state through
    [PlayerVoip](../Assets/Decommissioned/Scripts/Player/PlayerVoip.cs).

    

    ##
    Group Presence

    

    The application sets group presence when users change
    scenes and networked rooms, allowing others to join easily. The main implementation
    is in [GroupPresenceState](../Packages/com.meta.multiplayer.netcode-photon/Core/GroupPresenceState.cs),
    which implements the group presence API and maintains the state locally.

    

    ##
    Photon with Netcode for GameObject

    

    This project uses [Netcode for
    GameObjects](https://github.com/Unity-Technologies/com.unity.netcode.gameobjects)
    with the [Photon Realtime Transport](https://github.com/Unity-Technologies/multiplayer-community-contributions/tree/main/Transports/com.community.netcode.transport.photon-realtime).
    We used a fork of the transport package from [Ultimate Glove Ball](https://github.com/oculus-samples/Unity-UltimateGloveBall/tree/main/Packages/com.community.netcode.transport.photon-realtime%40b28923aa5d).

    

    The
    fork includes:

    

    - Adding intent on connection as a client, host,
    or to the lobby. [PhotonRealtimeTransport](https://github.com/oculus-samples/Unity-UltimateGloveBall/blob/main/Packages/com.community.netcode.transport.photon-realtime%40b28923aa5d/Runtime/PhotonRealtimeTransport.cs)

    -
    Creating a private room with a visible flag.

    - Adding a region override
    to change regions.

    - Supporting join random room failure. [PhotonRealtimeTransport.MatchMaking](https://github.com/oculus-samples/Unity-UltimateGloveBall/blob/main/Packages/com.community.netcode.transport.photon-realtime%40b28923aa5d/Runtime/PhotonRealtimeTransport.Matchmaking.cs)

    -
    Adding a function to handle room creation with parameters. The parameters getter
    function can be hooked to the [PhotonRealtimeTransport.Connection](https://github.com/oculus-samples/Unity-UltimateGloveBall/blob/main/Packages/com.community.netcode.transport.photon-realtime%40b28923aa5d/Runtime/PhotonRealtimeTransport.Connection.cs)
    at runtime, giving full ownership to the project on room creation.

'
  m_overrideMarkdownRoot: .\Documentation/
